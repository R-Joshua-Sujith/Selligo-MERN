import React, { useState, useEffect } from "react";
import TextField from "@mui/material/TextField";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import IconButton from "@mui/material/IconButton";
import AddIcon from "@mui/icons-material/Add";
import DeleteIcon from "@mui/icons-material/Delete";
import Button from "@mui/material/Button";
import "./AddBrand.css";
import { FormControl } from "@mui/material";
import Navigation from "../RepeatableComponents/Navigation";
import axios from "axios";

const AddBrand = () => {
  const [options, setOptions] = useState([]);
  const [brandName, setBrandName] = useState("");
  const [brandImage, setBrandImage] = useState("");
  const [checkedItems, setCheckedItems] = useState([]);
  const [series, setSeries] = useState({}); // Object to hold series for each category
  const [models, setModels] = useState({}); // Object to hold models for each series

  useEffect(() => {
    axios
      .get("http://api.selligo.in/get-all-category-types")
      .then((response) => {
        setOptions(response.data);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  }, []);

  const handleChange = (category) => {
    setCheckedItems((prevCheckedItems) => {
      const index = prevCheckedItems.indexOf(category);

      if (index === -1) {
        return [...prevCheckedItems, category];
      } else {
        const updatedItems = [...prevCheckedItems];
        updatedItems.splice(index, 1);
        return updatedItems;
      }
    });

    // Initialize the series array for the selected category
    setSeries((prevSeries) => ({
      ...prevSeries,
      [category]: prevSeries[category] || [],
    }));

    // Initialize the models object for the selected category
    setModels((prevModels) => ({
      ...prevModels,
      [category]: prevModels[category] || {},
    }));
  };

  const handleAddSeries = (category) => {
    setSeries((prevSeries) => ({
      ...prevSeries,
      [category]: [...prevSeries[category], ""],
    }));
  };

  const handleDeleteSeries = (category, index) => {
    setSeries((prevSeries) => ({
      ...prevSeries,
      [category]: prevSeries[category].filter((_, i) => i !== index),
    }));

    // Remove models for the deleted series
    setModels((prevModels) => {
      const updatedModels = { ...prevModels };
      delete updatedModels[category][index];
      return updatedModels;
    });
  };

  const handleSeriesChange = (category, index, value) => {
    setSeries((prevSeries) => ({
      ...prevSeries,
      [category]: prevSeries[category].map((item, i) =>
        i === index ? value : item
      ),
    }));
  };

  const handleAddModel = (category, seriesIndex) => {
    setModels((prevModels) => ({
      ...prevModels,
      [category]: {
        ...prevModels[category],
        [seriesIndex]: [
          ...(prevModels[category]?.[seriesIndex] || []),
          { modelName: "", seriesName: "" },
        ],
      },
    }));
  };

  const handleDeleteModel = (category, seriesIndex, modelIndex) => {
    setModels((prevModels) => ({
      ...prevModels,
      [category]: {
        ...prevModels[category],
        [seriesIndex]: prevModels[category]?.[seriesIndex]?.filter(
          (_, i) => i !== modelIndex
        ),
      },
    }));
  };

  const handleModelChange = (
    category,
    seriesIndex,
    modelIndex,
    value,
    seriesName
  ) => {
    setModels((prevModels) => ({
      ...prevModels,
      [category]: {
        ...prevModels[category],
        [seriesIndex]: prevModels[category]?.[seriesIndex]?.map((model, i) =>
          i === modelIndex ? { ...model, modelName: value, seriesName } : model
        ),
      },
    }));
  };

  const handleSubmit = async () => {
    // try {
    //   if (!brandName.trim() || !brandImage.trim()) {
    //     alert("Brand Name and Brand Image are required");
    //     return;
    //   }

    //   const selectedCategories = Object.values(checkedItems).filter(Boolean);
    //   if (selectedCategories.length === 0) {
    //     alert("Select at least one category");
    //     return;
    //   }

    //   const atleastOneSeries = selectedCategories.some(
    //     (category) => !series[category] || series[category].length === 0
    //   );

    //   if (atleastOneSeries) {
    //     alert("Add at least one series for each selected category");
    //     return;
    //   }

    //   const hasEmptySeries = selectedCategories.some(
    //     (category) =>
    //       !series[category] || series[category].some((s) => s.trim() === "")
    //   );

    //   if (hasEmptySeries) {
    //     alert("Please fill the series for the selected category");
    //     return;
    //   }

    //   await axios.post("http://api.selligo.in/add-brand", {
    //     brandName,
    //     brandImage,
    //     categoryType: checkedItems,
    //     series,
    //     models,
    //   });

    //   alert("Brand added successfully!");

    //   setBrandName("");
    //   setBrandImage("");
    //   setCheckedItems([]);
    //   setSeries({});
    //   setModels({});
    // } catch (err) {
    //   alert(err.response.data.error);
    // }
    console.log(series, models);
  };

  return (
    <div className="add-brand-container">
      <Navigation />
      <div>
        <h1>Create an entry</h1>
        <div className="add-brand-main-container">
          <TextField
            id="outlined-search"
            label="Brand Name"
            type="text"
            size="small"
            value={brandName}
            onChange={(e) => setBrandName(e.target.value)}
          />
          <br />
          <TextField
            id="outlined-search"
            label="Brand Image Link"
            type="text"
            size="small"
            value={brandImage}
            sx={{ mt: 2 }}
            onChange={(e) => setBrandImage(e.target.value)}
          />
          <br />
          <h4>Select Categories</h4>
          <div className="options-container">
            {options.map((option) => (
              <div key={option._id}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={checkedItems.includes(option.category_type)}
                      onChange={() => handleChange(option.category_type)}
                      sx={{
                        color: "#5644c4",
                        "&:checked": {
                          color: "#5644c4",
                        },
                      }}
                    />
                  }
                  label={option.category_type}
                />
                {checkedItems.includes(option.category_type) && (
                  <div>
                    {series[option.category_type].map((seriesItem, index) => (
                      <div
                        key={index}
                        style={{ display: "flex", alignItems: "center" }}
                      >
                        <TextField
                          id={`series-input-${option.category_type}-${index}`}
                          label={`Enter series name`}
                          type="text"
                          size="small"
                          value={seriesItem}
                          sx={{ mt: 2 }}
                          onChange={(e) =>
                            handleSeriesChange(
                              option.category_type,
                              index,
                              e.target.value
                            )
                          }
                        />
                        <IconButton
                          onClick={() =>
                            handleDeleteSeries(option.category_type, index)
                          }
                          sx={{ color: "#5644c4" }}
                        >
                          <DeleteIcon />
                        </IconButton>

                        {models[option.category_type]?.[index]?.map(
                          (model, modelIndex) => (
                            <div key={modelIndex}>
                              <TextField
                                id={`model-input-${option.category_type}-${index}-${modelIndex}`}
                                label={`Enter model name`}
                                type="text"
                                size="small"
                                value={model.modelName}
                                sx={{ mt: 2 }}
                                onChange={(e) =>
                                  handleModelChange(
                                    option.category_type,
                                    index,
                                    modelIndex,
                                    e.target.value,
                                    seriesItem
                                  )
                                }
                              />
                              <IconButton
                                onClick={() =>
                                  handleDeleteModel(
                                    option.category_type,
                                    index,
                                    modelIndex
                                  )
                                }
                                sx={{ color: "#5644c4" }}
                              >
                                <DeleteIcon />
                              </IconButton>
                            </div>
                          )
                        )}
                        <IconButton
                          onClick={() =>
                            handleAddModel(option.category_type, index)
                          }
                          sx={{ color: "#5644c4" }}
                        >
                          <AddIcon />
                        </IconButton>
                      </div>
                    ))}
                    <IconButton
                      onClick={() => handleAddSeries(option.category_type)}
                      sx={{ color: "#5644c4" }}
                    >
                      <AddIcon />
                    </IconButton>
                  </div>
                )}
              </div>
            ))}
          </div>
          <Button
            variant="contained"
            onClick={handleSubmit}
            sx={{
              width: "100%",
              backgroundColor: "#5644c4",
              "&:hover": {
                backgroundColor: "white",
                color: "#5644c4",
                border: "2px solid #5644c4",
              },
            }}
          >
            Create Brand
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AddBrand;
